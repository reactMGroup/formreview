{"version":3,"sources":["components/conclude.jsx","components/checkbox.jsx","components/input-select-controlled.jsx","components/input-text.jsx","components/input-text-area.jsx","components/form-basic.js","components/preview.jsx","components/survey-app.jsx","App.js","serviceWorker.js","index.js"],"names":["Conclude","onClick","props","processNext","type","value","require","Component","CheckBox","whenClicked","bind","this","fieldID","onInput","e","target","checked","caption","defaultProps","console","log","InputSelectControlled","event","fieldChanged","id","hidden","disabled","options","map","entry","key","InputTextControlled","htmlFor","placeholder","TextArea","label","name","rows","cols","iName","iTaC","occupationValues","getLocalData","defaultValue","storageValue","localStorage","getItem","undefined","FormBasic","state","submitForm","newValue","setItem","setState","showStateiInConsole","preventDefault","preview","setPreview","onSubmit","Object","keys","forEach","Preview","data","index","SurveyApp","next","setPreviewState","current","previewState","stateMachine","form","end","step","formData","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba3e5182.chunk.js","sourcesContent":["import React from 'react';\nconst { Component } = require(\"react\");\n\nclass Conclude extends Component {\n    render() {\n        return (\n            <section>\n                <p>Success</p>\n                <input onClick={() => this.props.processNext('form')} type=\"button\" value='Done' />\n            </section>\n        )\n    }\n}\n\nexport default Conclude;","import React, { Component } from 'react';\n\nclass CheckBox extends Component {\n    static defaultProps = {\n        caption: \"define caption\",\n        value: true,\n        whenClicked: function (value) {\n            console.log(`New value ${value}`);\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.whenClicked = this.whenClicked.bind(this);\n    }\n\n    whenClicked(value) {\n        this.props.whenClicked(!value, this.props.fieldID);\n    }\n\n    render() {\n        return (<label>\n            <input type='checkbox' onInput={e => this.whenClicked(e.target.checked)} checked={this.props.value} />{this.props.caption}\n        </label>);\n    }\n}\n\nexport default CheckBox;","import React, { Component } from 'react';\n\nclass InputSelectControlled extends Component {\n    render() {\n        return (\n            <select  value={this.props.value} onInput={event => this.props.fieldChanged(event.target.value, this.props.fieldID)} id={this.props.fieldID}>\n                <option hidden disabled \n                 value> -- select an option -- </option>\n                {\n                    this.props.options\n                        .map(entry => (<option key={entry}>{entry}</option>))\n                }\n            </select>\n        )\n    }\n}\n\nexport default InputSelectControlled;","import React, { Component } from 'react';\n\nclass InputTextControlled extends Component {\n    render() {\n        return (\n            <label htmlFor={this.props.fieldID}>\n                {this.props.placeholder}<input value={this.props.value} onInput={event => this.props.fieldChanged(event.target.value, this.props.fieldID)} id={this.props.fieldID} type='text' placeholder={this.props.placeholder} />\n            </label>\n        )\n    }\n}\n\nexport default InputTextControlled;","import React, { Component } from 'react'\n\nclass TextArea extends Component {\n    render() {\n        return (\n            <label htmlFor={this.props.fieldID}>\n                {this.props.label}<textarea  value={this.props.value} onInput={event => this.props.fieldChanged(event.target.value, this.props.fieldID)} id={this.props.fieldID} name={this.props.fieldID} rows=\"4\" cols=\"50\" />\n            </label>\n        )\n    }\n}\n\nexport default TextArea;","import React, { Component } from 'react';\nimport CheckBox from './checkbox';\nimport InputSelectControlled from './input-select-controlled';\nimport InputTextControlled from './input-text';\nimport TextArea from './input-text-area';\n\nconst iName = 'txtName';\nconst iSurName = 'txtSurName';\nconst inOccupation = 'occupation';\nconst iFreeText = 'freetext';\nconst iTaC = 'trmsacnd';\nconst iSlsAgree = 'salesAgree';\n\n\nconst occupationValues = [\n    'Developer',\n    'Designer',\n    'Product',\n]\n\nconst getLocalData = function (fieldID, defaultValue) {\n    const storageValue = localStorage.getItem(fieldID);\n    if (storageValue) {\n        return storageValue;\n    }\n    if (defaultValue !== undefined) {\n        return defaultValue;\n    }\n    return '';\n}\n\nclass FormBasic extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            [iName]: getLocalData(iName),\n            [iSurName]: getLocalData(iSurName),\n            [inOccupation]: getLocalData(inOccupation),\n            [iFreeText]: getLocalData(iFreeText),\n            [iTaC]: getLocalData(iTaC, 'false') === 'true',\n            [iSlsAgree]: getLocalData(iSlsAgree, 'true') === 'true',\n        };\n        this.fieldChanged = this.fieldChanged.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n    fieldChanged(newValue, fieldID) {\n        console.log(`new value ${newValue}`);\n        localStorage.setItem([fieldID], newValue);\n        this.setState({ [fieldID]: newValue },\n            this.showStateiInConsole()\n        );\n    }\n\n    submitForm(event) {\n        event.preventDefault();\n        const preview = [`Name ${this.state[iName]} ${this.state[iSurName]}`,\n        `Occupation ${this.state[inOccupation]}`,\n        `Free text ${this.state[iFreeText]}`,\n        `Agree to Terms and Conditions ${this.state[iTaC]}`,\n        `Get subscription ${this.state[iSlsAgree]}`];\n        this.props.setPreview(preview);\n        this.props.processNext('preview');\n    }\n\n    render() {\n        return (<form onSubmit={this.submitForm}>\n            <InputTextControlled fieldChanged={this.fieldChanged} fieldID={iName} placeholder='Name' value={this.state[iName]} />\n            <InputTextControlled fieldChanged={this.fieldChanged} fieldID={iSurName} placeholder='Surname' value={this.state[iSurName]} />\n            <br />\n            <InputSelectControlled fieldChanged={this.fieldChanged} fieldID={inOccupation} options={occupationValues} value={this.state[inOccupation]} />\n            <br />\n            <TextArea fieldChanged={this.fieldChanged} label='Free text' fieldID={iFreeText} value={this.state[iFreeText]} />\n            <br />\n            <br />\n            <CheckBox whenClicked={this.fieldChanged} fieldID={iTaC} value={this.state[iTaC]} caption=\"I agree to terms and conditons.\" />\n            <br />\n            <CheckBox whenClicked={this.fieldChanged} fieldID={iSlsAgree} value={this.state[iSlsAgree]} caption=\"I want to receive sales materials.\" />\n            <br />\n            <input type='submit' value='Next' />\n        </form>)\n    }\n\n    showStateiInConsole() {\n        Object.keys(this.state).forEach(key => console.log(`${key}: ${this.state[key]}`));\n    }\n}\n\nexport default FormBasic;","import React, { Component } from 'react';\n\nclass Preview extends Component {\n\n    render() {\n        console.log(this.props.data);\n        return (\n            <section>\n                <ul>\n                    {\n                        this.props.data\n                            .map((entry,index) => (<p key={index}>{entry}</p>))\n                    }\n                </ul>\n                <input onClick={() => this.props.processNext('form')} type=\"button\" value='Back to the From' />\n                <input onClick={() => this.props.processNext('end')} type='button' value='Submit' />\n            </section>\n        )\n    }\n}\n\nexport default Preview;","import React, { Component } from 'react';\nimport Conclude from './conclude';\nimport FormBasic from './form-basic';\nimport Preview from './preview';\n\nclass SurveyApp extends Component {\n\n    constructor() {\n        super();\n        this.next = this.next.bind(this);\n        this.setPreviewState = this.setPreviewState.bind(this);\n        this.state = {\n            current: 'form',\n            previewState: []\n        }\n        this.stateMachine = {\n            form: () => (<FormBasic processNext={this.next} setPreview={this.setPreviewState} />),\n            preview: () => (<Preview processNext={this.next} data={this.state.previewState} />),\n            end: () => (<Conclude processNext={this.next} />)\n        }\n    }\n\n    next(step) {\n        this.setState({ current: step });\n    }\n\n    setPreviewState(formData) {\n        this.setState({ previewState: formData });\n    }\n\n    render() {\n        return (\n            <section>\n                <h3>Survey</h3>\n                {this.stateMachine[this.state.current]()}\n            </section>\n        )\n    }\n\n}\n\nexport default SurveyApp;","import React from 'react';\nimport './App.css';\nimport SurveyApp from './components/survey-app';\n\nfunction App() {\n  return (\n    <section className=\"App\">\n      <SurveyApp />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}